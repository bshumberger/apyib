import psi4
import numpy as np
import apyib
import pytest
from ..data.molecules import *

def test_rhf_hessian():
    # Set parameters for the calculation.
    parameters = {'geom': moldict["H2O_C4_HF"],
                  'basis': 'STO-3G',
                  'method': 'RHF',
                  'e_convergence': 1e-12,
                  'd_convergence': 1e-12,
                  'DIIS': True,
                  'F_el': [0.0, 0.0, 0.0],
                  'F_mag': [0.0, 0.0, 0.0],
                  'max_iterations': 120}

    # Setting RHF reference Hessian from CFOUR HF/STO-3G optimized geometry.
    hess_ref = np.array([
     [  0.0000002355,        0.0000000000,        0.0000000000],
     [ -0.0000001178,        0.0000000000,        0.0000000000],
     [ -0.0000001178,        0.0000000000,        0.0000000000],
     [  0.0000000000,        0.8039499964,        0.0000000000],
     [  0.0000000000,       -0.4019749982,       -0.3371363249],
     [  0.0000000000,       -0.4019749982,        0.3371363249],
     [  0.0000000000,        0.0000000000,        0.6348993605],
     [  0.0000000000,       -0.2163116072,       -0.3174496803],
     [  0.0000000000,        0.2163116072,       -0.3174496803],
     [ -0.0000001178,        0.0000000000,        0.0000000000],
     [  0.0000001262,        0.0000000000,        0.0000000000],
     [ -0.0000000084,        0.0000000000,        0.0000000000],
     [  0.0000000000,       -0.4019749982,       -0.2163116072],
     [  0.0000000000,        0.4389111622,        0.2767239660],
     [  0.0000000000,       -0.0369361640,       -0.0604123588],
     [  0.0000000000,       -0.3371363249,       -0.3174496803],
     [  0.0000000000,        0.2767239660,        0.3001030221],
     [  0.0000000000,        0.0604123588,        0.0173466582],
     [ -0.0000001178,        0.0000000000,        0.0000000000],
     [ -0.0000000084,        0.0000000000,        0.0000000000],
     [  0.0000001262,        0.0000000000,        0.0000000000],
     [  0.0000000000,       -0.4019749982,        0.2163116072],
     [  0.0000000000,       -0.0369361640,        0.0604123588],
     [  0.0000000000,        0.4389111622,       -0.2767239660],
     [  0.0000000000,        0.3371363249,       -0.3174496803],
     [  0.0000000000,       -0.0604123588,        0.0173466582],
     [  0.0000000000,       -0.2767239660,        0.3001030221]
    ])
    
    # Compute energy.
    E_list, T_list, C, basis = apyib.energy.energy(parameters)

    # Compute finite difference Hessian using apyib.
    finite_difference = apyib.fin_diff.finite_difference(parameters, basis, C)
    hessian = finite_difference.compute_Hessian(0.001)

    assert(np.max(np.abs(hessian-hess_ref.reshape(9,9))) < 1e-6)

def test_mp2_hessian():
    # Set parameters for the calculation.
    parameters = {'geom': moldict["H2O_C4_MP2"],
                  'basis': 'STO-3G',
                  'method': 'MP2',
                  'e_convergence': 1e-12,
                  'd_convergence': 1e-12,
                  'DIIS': True,
                  'F_el': [0.0, 0.0, 0.0],
                  'F_mag': [0.0, 0.0, 0.0],
                  'max_iterations': 120}

    # Setting MP2 reference Hessian from CFOUR MP2/STO-3G optimized geometry.
    hess_ref = np.array([
    [   0.0000000001,       -0.0000000000,       -0.0000000000],
    [  -0.0000000001,        0.0000000000,        0.0000000000],
    [  -0.0000000001,       -0.0000000000,        0.0000000000],
    [  -0.0000000000,        0.6608196899,       -0.0000000000],
    [   0.0000000000,       -0.3304098449,       -0.2909106155],
    [  -0.0000000000,       -0.3304098449,        0.2909106155],
    [  -0.0000000000,       -0.0000000000,        0.5495711873],
    [   0.0000000000,       -0.1762837568,       -0.2747855936],
    [   0.0000000000,        0.1762837568,       -0.2747855936],
    [  -0.0000000001,        0.0000000000,        0.0000000000],
    [   0.0000000000,       -0.0000000000,       -0.0000000000],
    [   0.0000000001,        0.0000000000,        0.0000000000],
    [   0.0000000000,       -0.3304098449,       -0.1762837569],
    [  -0.0000000000,        0.3678952802,        0.2335971862],
    [  -0.0000000000,       -0.0374854352,       -0.0573134293],
    [   0.0000000000,       -0.2909106156,       -0.2747855936],
    [  -0.0000000000,        0.2335971862,        0.2654594806],
    [   0.0000000000,        0.0573134294,        0.0093261131],
    [  -0.0000000001,       -0.0000000000,        0.0000000000],
    [   0.0000000001,       -0.0000000000,        0.0000000000],
    [   0.0000000000,        0.0000000000,       -0.0000000000],
    [  -0.0000000000,       -0.3304098449,        0.1762837569],
    [   0.0000000000,       -0.0374854352,        0.0573134293],
    [   0.0000000000,        0.3678952802,       -0.2335971862],
    [   0.0000000000,        0.2909106156,       -0.2747855936],
    [   0.0000000000,       -0.0573134294,        0.0093261131],
    [  -0.0000000000,       -0.2335971862,        0.2654594806],
    ])
 
    # Compute energy.
    E_list, T_list, C, basis = apyib.energy.energy(parameters)

    # Compute finite difference Hessian using apyib.
    finite_difference = apyib.fin_diff.finite_difference(parameters, basis, C)
    hessian = finite_difference.compute_Hessian(0.001)

    assert(np.max(np.abs(hessian-hess_ref.reshape(9,9))) < 1e-6)

def test_mp2_SO_hessian():
    # Set parameters for the calculation.
    parameters = {'geom': moldict["H2O_C4_MP2"],
                  'basis': 'STO-3G',
                  'method': 'MP2_SO',
                  'e_convergence': 1e-12,
                  'd_convergence': 1e-12,
                  'DIIS': True,
                  'F_el': [0.0, 0.0, 0.0],
                  'F_mag': [0.0, 0.0, 0.0],
                  'max_iterations': 120}

    # Setting MP2 reference Hessian from CFOUR MP2/STO-3G optimized geometry.
    hess_ref = np.array([
    [   0.0000000001,       -0.0000000000,       -0.0000000000],
    [  -0.0000000001,        0.0000000000,        0.0000000000],
    [  -0.0000000001,       -0.0000000000,        0.0000000000],
    [  -0.0000000000,        0.6608196899,       -0.0000000000],
    [   0.0000000000,       -0.3304098449,       -0.2909106155],
    [  -0.0000000000,       -0.3304098449,        0.2909106155],
    [  -0.0000000000,       -0.0000000000,        0.5495711873],
    [   0.0000000000,       -0.1762837568,       -0.2747855936],
    [   0.0000000000,        0.1762837568,       -0.2747855936],
    [  -0.0000000001,        0.0000000000,        0.0000000000],
    [   0.0000000000,       -0.0000000000,       -0.0000000000],
    [   0.0000000001,        0.0000000000,        0.0000000000],
    [   0.0000000000,       -0.3304098449,       -0.1762837569],
    [  -0.0000000000,        0.3678952802,        0.2335971862],
    [  -0.0000000000,       -0.0374854352,       -0.0573134293],
    [   0.0000000000,       -0.2909106156,       -0.2747855936],
    [  -0.0000000000,        0.2335971862,        0.2654594806],
    [   0.0000000000,        0.0573134294,        0.0093261131],
    [  -0.0000000001,       -0.0000000000,        0.0000000000],
    [   0.0000000001,       -0.0000000000,        0.0000000000],
    [   0.0000000000,        0.0000000000,       -0.0000000000],
    [  -0.0000000000,       -0.3304098449,        0.1762837569],
    [   0.0000000000,       -0.0374854352,        0.0573134293],
    [   0.0000000000,        0.3678952802,       -0.2335971862],
    [   0.0000000000,        0.2909106156,       -0.2747855936],
    [   0.0000000000,       -0.0573134294,        0.0093261131],
    [  -0.0000000000,       -0.2335971862,        0.2654594806],
    ])  
 
    # Compute energy.
    E_list, T_list, C, basis = apyib.energy.energy(parameters)

    # Compute finite difference Hessian using apyib.
    finite_difference = apyib.fin_diff.finite_difference(parameters, basis, C)
    hessian = finite_difference.compute_Hessian(0.001)

    assert(np.max(np.abs(hessian-hess_ref.reshape(9,9))) < 1e-6)

def test_cid_hessian():
    # Set parameters for the calculation.
    parameters = {'geom': moldict["H2O_C4_CID"],
                  'basis': 'STO-3G',
                  'method': 'CID',
                  'e_convergence': 1e-12,
                  'd_convergence': 1e-12,
                  'DIIS': True,
                  'F_el': [0.0, 0.0, 0.0],
                  'F_mag': [0.0, 0.0, 0.0],
                  'max_iterations': 120}

    # Setting MP2 reference Hessian from CFOUR MP2/STO-3G optimized geometry.
    hess_ref = np.array([
     [  0.0000000000,        0.0000003053,        0.0000002035],
     [ -0.0000002699,       -0.0000003146,        0.0000003301],
     [  0.0000002699,        0.0000000000,       -0.0000005337],
     [  0.0000003053,        0.5894600186,        0.0000004070],
     [ -0.0000004766,       -0.2947303332,       -0.2613836255],
     [  0.0000001713,       -0.2947296854,        0.2613832185],
     [  0.0000002035,        0.0000004070,        0.5172143285],
     [ -0.0000004257,       -0.1557235360,       -0.2586071103],
     [  0.0000002222,        0.1557231290,       -0.2586072182],
     [ -0.0000002699,       -0.0000004766,       -0.0000004257],
     [  0.0000006710,        0.0000001760,       -0.0000001463],
     [ -0.0000004010,        0.0000003005,        0.0000005720],
     [ -0.0000003146,       -0.2947303332,       -0.1557235360],
     [  0.0000001760,        0.3327798576,        0.2085535363],
     [  0.0000001386,       -0.0380495244,       -0.0528300003],
     [  0.0000003301,       -0.2613836255,       -0.2586071103],
     [ -0.0000001463,        0.2085535363,        0.2452085405],
     [ -0.0000001838,        0.0528300892,        0.0133985698],
     [  0.0000002699,        0.0000001713,        0.0000002222],
     [ -0.0000004010,        0.0000001386,       -0.0000001838],
     [  0.0000001311,       -0.0000003098,       -0.0000000384],
     [  0.0000000000,       -0.2947296854,        0.1557231290],
     [  0.0000003005,       -0.0380495244,        0.0528300892],
     [ -0.0000003098,        0.3327792098,       -0.2085532182],
     [ -0.0000005337,        0.2613832185,       -0.2586072182],
     [  0.0000005720,       -0.0528300003,        0.0133985698],
     [ -0.0000000384,       -0.2085532182,        0.2452086484],
    ])

    # Compute energy.
    E_list, T_list, C, basis = apyib.energy.energy(parameters)

    # Compute finite difference Hessian using apyib.
    finite_difference = apyib.fin_diff.finite_difference(parameters, basis, C)
    hessian = finite_difference.compute_Hessian(0.001)

    assert(np.max(np.abs(hessian-hess_ref.reshape(9,9))) < 1e-6)

def test_cid_SO_hessian():
    # Set parameters for the calculation.
    parameters = {'geom': moldict["H2O_C4_CID"],
                  'basis': 'STO-3G',
                  'method': 'CID_SO',
                  'e_convergence': 1e-12,
                  'd_convergence': 1e-12,
                  'DIIS': True,
                  'F_el': [0.0, 0.0, 0.0],
                  'F_mag': [0.0, 0.0, 0.0],
                  'max_iterations': 120}

    # Setting MP2 reference Hessian from CFOUR MP2/STO-3G optimized geometry.
    hess_ref = np.array([
     [  0.0000000000,        0.0000003053,        0.0000002035],
     [ -0.0000002699,       -0.0000003146,        0.0000003301],
     [  0.0000002699,        0.0000000000,       -0.0000005337],
     [  0.0000003053,        0.5894600186,        0.0000004070],
     [ -0.0000004766,       -0.2947303332,       -0.2613836255],
     [  0.0000001713,       -0.2947296854,        0.2613832185],
     [  0.0000002035,        0.0000004070,        0.5172143285],
     [ -0.0000004257,       -0.1557235360,       -0.2586071103],
     [  0.0000002222,        0.1557231290,       -0.2586072182],
     [ -0.0000002699,       -0.0000004766,       -0.0000004257],
     [  0.0000006710,        0.0000001760,       -0.0000001463],
     [ -0.0000004010,        0.0000003005,        0.0000005720],
     [ -0.0000003146,       -0.2947303332,       -0.1557235360],
     [  0.0000001760,        0.3327798576,        0.2085535363],
     [  0.0000001386,       -0.0380495244,       -0.0528300003],
     [  0.0000003301,       -0.2613836255,       -0.2586071103],
     [ -0.0000001463,        0.2085535363,        0.2452085405],
     [ -0.0000001838,        0.0528300892,        0.0133985698],
     [  0.0000002699,        0.0000001713,        0.0000002222],
     [ -0.0000004010,        0.0000001386,       -0.0000001838],
     [  0.0000001311,       -0.0000003098,       -0.0000000384],
     [  0.0000000000,       -0.2947296854,        0.1557231290],
     [  0.0000003005,       -0.0380495244,        0.0528300892],
     [ -0.0000003098,        0.3327792098,       -0.2085532182],
     [ -0.0000005337,        0.2613832185,       -0.2586072182],
     [  0.0000005720,       -0.0528300003,        0.0133985698],
     [ -0.0000000384,       -0.2085532182,        0.2452086484],
    ])  

    # Compute energy.
    E_list, T_list, C, basis = apyib.energy.energy(parameters)

    # Compute finite difference Hessian using apyib.
    finite_difference = apyib.fin_diff.finite_difference(parameters, basis, C)
    hessian = finite_difference.compute_Hessian(0.001)

    assert(np.max(np.abs(hessian-hess_ref.reshape(9,9))) < 1e-6)
